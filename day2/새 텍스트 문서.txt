시나리오 작성후 코딩

시나리오를 작성하면 if else if문이 길어지지않는다.else문을 가능하면 길지않게끔 노력한다

일관성 있게 코딩한다.



표현식
표현식이란 자바스크립트 인터프리터가 계산하여 값을 구할 수 있는 자바스크립트 구절로 
가장 간단한 표현식은 리터럴 또는 변수의 이름이다.  
리터럴 표현식의 값은 그 리터럴 값 자신이고 변수 표현식의 값은 해당 변수가 저장하거나 참조하는 값이다. 

 

for문이 3개가 겹치면 안된다


html5마크업=콘텐츠모델

모델링의 목적:최적화 (100점이 될수없다. 100점이라는 기준이없다.)

퍼블리셔보다는 ux/ui개발자








자바스크립트는 객체지향 프로그래밍언어(OOP:Object Oriented Programming)

스크립팅언어
-텍스트를 사전에 컴파일하지 않음
-실제 사용하는 시점에 컴파일
-Java,C++와 같은 OOP 언어와
 구현 측면에서 차이 있음
-단점은 버리고 장점 활용 지혜 필요

전제조건
-OOP개념 이해 필요
-자바스크립트 언어 특징 접목


자바스크립트 랜더링

랜더링-자바스크립트 실행 환경 설정

랜더링 시점
 -처음<script></script>를 만났을때
-두번째 <script>에서는 랜더링 하지 않음

랜더링하는것
-언어 실행을 위한 오브젝트 생성(built-in)
-언어에서 사용하는 값 초기화

빌트인(built-in)
-랜더링 과정에서 생성하는 것을 총칭

*내장과 빌트인의 시멘틱 차이는, 내장은 브라우저 안에 들어있는것이고
 빌트인은 엔진 실행시 환경을 만들면서 생성되어서만들어 지는것
 빌트인(지금만들어서 집어넣는다)




빌트인 구분
-빌트인 값(데이터) 타입
-빌트인 연산자
-빌트인 오브젝트


빌트인 값(데이터) 타입
-undefined,Null,Boolean,Number,String,Object

빌트인 연산자(operator)
-++,--,+,-,*,/,%,new 등

빌트인 오브젝트
-Global,Object,Function,Array
-String,Boolean,Number
-Math,Date,RegExp,JSON
-Error,EvalError,Range,Error,ReferenceError 등(알필요없는 줄, 내부적로직)



인스턴스[ 하나의 틀에서 나오는 다양한 형태]

-오브젝트로 생성한 오브젝트
-하나 이상 다수를 생성할 수 있음
-var Value = function(){};
-value.prototype = {}
-new Value() 형태로 생성

싱글톤(singleton) 오브젝트

-var Value = {add:function(param){코드}}형태는 인스턴스 생성 불가
이를 싱글톤 오브젝트라 함  
var Value = {add:function(){}} 이걸로 인스턴스 생성 불가


자바스크립트는 두 형태를 모두 갖고있음
-인스턴스를 생성 할수 있는 오브젝트
-인스턴스를 생성할 수 없는 싱글톤 오브젝트





빌트인 타입, 빌트인 오브젝트  (자바스크립트 엔진이 해줌)

1.랜더링하면서 빌트인 타입과 오브젝트 생성
2.따라서 필요한 처리를 하지 않아도 오브젝트를 사용할 수 있음
3.즉 new 연산자로 인스턴스를 생성하지 않아도
데이터 타입에 따른 오브젝트 인식과 함수 호출 가능


빌트인과 내장의 차이점임.

랜더링되면서 '1'.concat('2')을 만나면

concat메서드가 문자열,배열 둘다 가지고있는 메서드지만
String().concat('1','2')
Array().concat('1','2')


엔진이 랜더링되면서 string()으로 변환해서 해석해준다.
이것이 빌트인이다.


Number()
String()
이런것이 대문자인 이유는
인스턴스를 생성하겠다는 (생성!!)
이유에서이다.





instanceof
오브젝트로 생성한 인스턴스 여부 반환

var obj = new String('baseball')
console.log(obj === String)
false

console.log(obj instanceof String)

instanceof로 비교해야 true가 반환된다











Object 형태 분류
-오브젝트{}
-빌트인 오브젝트
-네이티브 오브젝트(Native Object)
-호스트 오브젝트(host Object)

네이티브오브젝트
-arguments 오브젝트와 같이 자바스크립트 프로그램을 실행할 때 생성하는 오브젝트

호스트오브젝트
-자바스크립트 실행 환경을 지원하기 위한 오브젝트
-네이티브 오브젝트를 제외한 오브젝트
-예:DOM 오브젝트




var nodes = document.getElementsByTagName('script');
for(var k = 0 ; k <nodes.length; k++){
	console.log(nodes[k].nodeName);
}

getElementsByTagName()은 자바스크립트 메소드가아니라 DOM 메소드이다
DOM에서 제공하는 코드가 아닌 자바스크립트 for()문으로 DOM오브젝트를 처리하고있다
이와같이 자바스크립트 이외의 오브젝트를 호스트 오브젝트라고한다
자바스크립트로 호스트 오브젝트를 제어할 수 있다.

고로 자바스크립트의 확장성이 높다.
